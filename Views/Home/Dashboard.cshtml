@model BugHunterBugTrackerZD.Models.ViewModels.DashboardViewModel
@using BugHunterBugTrackerZD.Models.Enums
@using Microsoft.AspNetCore.Identity
@using BugHunterBugTrackerZD.Services.Interfaces

@inject SignInManager<BTUser> SignInManager
@inject UserManager<BTUser> UserManager

@inject IBTRolesService _RolesService

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? btUser = await UserManager.GetUserAsync(User);
}

<!-- Styles -->
<style>
    .amDark {
        background-color: #30303d;
        color: #fff;
    }

    #chartdiv {
        width: 100%;
        height: 500px;
    }

    .info-pills .body {
        min-height: 76px;
    }
</style>

@*<h1>Dashboard</h1>*@
<a href="javascript:void(0);">
    @* User Info *@
    [Code: Copy from Ticket/Details]
</a>
@* Get The btUser FullName *@
<strong>@btUser?.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
    @* Company Name *@
    <strong>@Model.Company?.CompanyName</strong>
</span>


<div>
    <div class="container-fluid">
        <!-- Info Pills -->
        <div class="row gy-3 my-2 info-pills">
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="Index" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center bg-info">
                        <div class="card-body  bg-info">
                            <div class="p-15 text-light">
                                <h3>@Model.Projects?.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now && p.Archived == false).Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="Index" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-danger">
                        <div class="card-body bg-danger">
                            <div class="p-15 text-light">

                                <h3>@Model.Tickets?.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-warning">
                    <div class="card-body bg-warning">
                        <div class="p-15 text-light">
                            <h3>@Model.Tickets?.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                            <span>Unassigned Tickets</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-success">
                    <div class="card-body bg-success">
                        <div class="p-15 text-light">
                            <h3>
                                @(
                                    Model.Projects?.Count()
                                    + Model.Tickets?.Count()
                                    + Model.Members?.Count()
                                    )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Info Pills -->
        <div class="row gy-3">
            <div class="col-12 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5>Projects by Priority</h5>
                        <div id="chart3D"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5>Project Tickets Count (%)</h5>
                        <div id="donut"></div>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5>Tickets by Priority</h5>
                        <!-- Morris: Donut -->
                        <div class="col-md-12">
                            <div id="legend" class="donut-legend" style="font-size:x-small"></div>
                        </div>
                        <div class="col-md-12">
                            <div class="chart chart-md" id="morrisTicketPriority"></div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5>Tickets by Status</h5>
                        <!-- ChartJS: Pie/Doughnut -->
                        <div class="col-md-12">
                            <!--  Chart.js Canvas Tag -->
                            <canvas id="donutChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="row gy-2">*@
            <div class="col-12">
                <div class="card">
                    <div class="card-body" style="height:600px">
                        <h5>Project: Tickets vs Developers</h5>
                        <!-- HTML -->
                        <div id="chartdiv"></div>
                    </div>
                </div>
            </div>
            @* </div>*@
            @*<div class="row gy-2">*@
            <div class="col-12">
                <div class="card">
                    <div class="card-body" style="height:600px;overflow-y:auto;">
                        <h5>Project: Tickets vs Developers</h5>
                        <!-- HTML -->
                        <div id="plotlyChart"></div>
                    </div>
                </div>
            </div>
            @* </div>*@
            @*<div class="mt-5 ">
            <div class="row">*@
            @* Projects Table *@
            <div class="col-12">

                <div class="card">
                    <div class="card-header">
                        <h2>Projects</h2>
                    </div>
                    <div class="card-body">
                        @* [Copy and format table from Unassigned Tickets] *@
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped table-responsive-md table-hover mb-0" id="datatable-default">
                                <thead>
                                    <tr>
                                        <th>
                                            Project Name
                                        </th>
                                        <th>
                                            Start Date
                                        </th>
                                        <th>
                                            End Date
                                        </th>
                                        <th>
                                            Project Priority
                                        </th>
                                    </tr>
                                </thead>

                                <tbody class="projectsIndexTable">
                                    @foreach (var item in Model.Projects!)
                                    {
                                        @if (item.Archived == false)
                                        {
                                            <tr>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Name)
                                                </td>

                                                <td>
                                                    @Html.DisplayFor(modelItem => item.StartDate)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.EndDate)
                                                </td>

                                                <td>
                                                    @Html.DisplayFor(modelItem => item.ProjectPriority!.Name)
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>

            </div>
            @* Tickets Table *@
            <div class="col-12">
                @*<div class="">*@
                <div class="card">
                    <div class="card-header">
                        <h2>Tickets</h2>
                    </div>
                    @*<div class="card-body">*@
                    @* Copy and format table from Unassigned Tickets *@

                    <div class="card-body">
                        <table class="table table-bordered table-striped table-hover mb-0" id="datatable-tickets">
                            <thead>
                                <tr>
                                    <th>
                                        Title
                                    </th>
                                    <th>
                                        Project
                                    </th>
                                    <th>
                                        Created / Updated
                                    </th>
                                    <th>
                                        Ticket Priority
                                    </th>
                                    <th>
                                        Ticket Type
                                    </th>
                                    <th>
                                        Ticket Status
                                    </th>
                                    <th>
                                        Submitter
                                    </th>

                                </tr>
                            </thead>
                            <tbody class="projectsIndexTable">
                                @foreach (var item in Model.Tickets!)
                                {
                                    if (!item.Archived == true)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Title)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Project!.Name)
                                            </td>

                                            <td>
                                                @Html.DisplayFor(modelItem => item.Created)
                                                @if (item.Updated != null)
                                                {
                                                    <span>/</span>  @Html.DisplayFor(modelItem => item.Updated)
                                                }
                                            </td>

                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketPriority!.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketType!.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TicketStatus!.Name)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.SubmitterUser!.FullName)
                                            </td>
                                            @* <td class="actions-hover actions-fade">
                                    <a asp-action="Edit" asp-route-id="@item.Id"> <i class="fas fa-pencil-alt text-warning fa-sm"></i> </a>
                                    <a asp-action="Details" asp-route-id="@item.Id"> <i class="bx bx-detail text-info fa-sm"></i> </a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="delete-row"> <i class="far fa-trash-alt text-danger fa-sm"></i> </a>
                                    </td>
                                    <td>
                                    <a asp-action="AssignTicketToUser" asp-route-id="@item.Id">Assign Ticket</a>
                                    </td>*@
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    </div>

                    @*</div>*@
                </div>
            </div>
            @*</div>*@
            <div class="col-12">
                <div class="row gy-3 mt-3">
                    <h3 class="fw-bold">Team Members</h3>
                    @*<div class="col-12 col-sm-6 col-lg-3">*@
                    @*<div class="text-muted my-2">Administrators</div>*@
                    @* @{
                    List<BTUser> admins = await _RolesService.GetUsersInRoleAsync(nameof(BTRoles.Admin), Model.Id);
                    }*@
                    @foreach (BTUser user in Model.Members!)
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex flex-row align-items-center p-3">
                                        @if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Admin)))
                                        {
                                            <span class="me-3"><i class='bx bx-key bx-sm'></i></span>
                                            <span> @user.FullName</span>
                                            <span class=" ms-auto badge badge-md badge-danger">Admin</span>
                                        }
                                        else if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.ProjectManager)))
                                        {
                                            <span class="me-3"><i class='bx bx-coffee bx-sm'></i></span>
                                            <span> @user.FullName</span>
                                            <span class=" ms-auto badge badge-md badge-dark">Project Manager</span>
                                        }
                                        else if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Developer)))
                                        {
                                            <span class="me-3"><i class='bx bx-code bx-sm'></i></span>
                                            <span> @user.FullName</span>
                                            <span class=" ms-auto badge badge-md badge-info">Developer</span>
                                        }
                                        else if (await _RolesService.IsUserInRoleAsync(user, nameof(BTRoles.Submitter)))
                                        {
                                            <span class="me-3"><i class='bx bx-user bx-sm'></i></span>
                                            <span> @user.FullName</span>
                                            <span class=" ms-auto badge badge-md badge-primary">Submitter</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                    }

                    @* </div>*@

                    @*                    <div class="col-12 col-sm-6 col-lg-3">
                    <div class="text-muted my-2">Project Managers</div>
                    @{
                    List<BTUser> projectManagers = await _RolesService.GetUsersInRoleAsync(nameof(BTRoles.ProjectManager), Model.Id);
                    }
                    @foreach (BTUser pm in projectManagers)
                    {
                    <div class="card">
                    <div class="card-body">
                    <div class="d-flex flex-row align-items-center p-2">
                    <span class="me-3"><i class='bx bx-coffee bx-sm'></i></span>
                    <span> @pm.FullName</span>
                    </div>
                    </div>
                    </div>
                    }

                    </div>

                    <div class="col-12 col-sm-6 col-lg-3">
                    <div class="text-muted my-2">Developers</div>
                    @{
                    List<BTUser> developers = await _RolesService.GetUsersInRoleAsync(nameof(BTRoles.Developer), Model.Id);
                    }
                    @foreach (BTUser dev in developers)
                    {
                    <div class="card">
                    <div class="card-body">
                    <div class="d-flex flex-row align-items-center p-2">
                    <span class="me-3"><i class='bx bx-code bx-sm'></i></span>
                    <span> @dev.FullName</span>
                    </div>
                    </div>
                    </div>
                    }
                    </div>

                    <div class="col-12 col-sm-6 col-lg-3">
                    <div class="text-muted my-2">Submitters</div>
                    @{
                    List<BTUser> submitters = await _RolesService.GetUsersInRoleAsync(nameof(BTRoles.Submitter), Model.Id);
                    }
                    @foreach (BTUser submitter in submitters)
                    {
                    <div class="card">
                    <div class="card-body">
                    <div class="d-flex flex-row align-items-center p-2">
                    <span class="me-3"><i class='bx bx-user bx-sm'></i></span>
                    <span> @submitter.FullName</span>
                    </div>
                    </div>
                    </div>
                    }
                    </div>
                    *@
                </div>

                @*                <div class="card">
                <div class="card-header">
                <h2>Members</h2>
                </div>
                <div class="card-body">
                Looop over Company members. Display Name and Role
                <ul class="list-unstyled">
                @foreach (BTUser member in Model.Members!)
                {
                <li>
                <strong>
                @member?.FullName -
                <span class="text-muted" style="font-size:x-small;">
                @foreach (var role in await UserManager.GetRolesAsync(member!))
                {
                <strong>@role</strong>

                }
                </span>
                </strong>
                </li>
                }

                </ul>
                </div>
                </div>
                *@
            </div>
            @* </div>
            </div>*@
        </div>



    </div>
</div>

@section Scripts{

    <!--Google Charts-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectPriority",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //3D Pie
                    var options = {
                        title: 'Project Priority',
                        is3D: true,
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: { position: 'bottom' }

                    };

                    var chart = new google.visualization.PieChart($("#chart3D")[0]);
                    chart.draw(data, options);
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>

    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Home/GglProjectTickets",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Company Ticket Distribution',
                        pieHole: 0.3,
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: { position: 'bottom' }
                    };
                    var chart = new google.visualization.PieChart($("#donut")[0]);
                    chart.draw(data, options);
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>

    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
    <script>

        var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
        var donutData = {
            labels: [
                '@nameof(BTTicketStatuses.Development)',
                '@nameof(BTTicketStatuses.New)',
                '@nameof(BTTicketStatuses.Resolved)',
                '@nameof(BTTicketStatuses.Testing)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.Development)).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.New)).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.Resolved)).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.Testing)).Count()
                                                                            ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>


    @* Morris Donut Chart *@
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <script>

        var morrisDonutData = [{
            label: "Low",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Low)).Count()
                                                            }, {
            label: "Medium",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Medium)).Count()
                                                            }, {
            label: "High",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.High)).Count()
                                                            }, {
            label: "Urgent",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Urgent)).Count()
                                                            }];



        /* Morris: Donut */

        if ($('#morrisTicketPriority').get(0)) {
            var donutChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChart.options.data.forEach(function (label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#legend').append(legendItem)
            });
        };
    </script>


    <!-- *** Begin AM Charts *** -->
    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

    <!-- Chart code -->
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/AmCharts",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                am4core.ready(function () {

                    // Themes begin
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create("chartdiv", am4charts.XYChart);


                    // Add data
                    chart.data = result;

                    // Create axes
                    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "project";
                    categoryAxis.numberFormatter.numberFormat = "#";
                    categoryAxis.renderer.inversed = true;
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.cellStartLocation = 0.1;
                    categoryAxis.renderer.cellEndLocation = 0.9;

                    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.opposite = true;

                    // Create series
                    function createSeries(field, name) {
                        var series = chart.series.push(new am4charts.ColumnSeries());
                        series.dataFields.valueX = field;
                        series.dataFields.categoryY = "project";
                        series.name = name;
                        series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
                        series.columns.template.height = am4core.percent(100);
                        series.sequencedInterpolation = true;

                        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
                        valueLabel.label.text = "{valueX}";
                        valueLabel.label.horizontalCenter = "left";
                        valueLabel.label.dx = 10;
                        valueLabel.label.hideOversized = false;
                        valueLabel.label.truncate = false;

                        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
                        categoryLabel.label.text = "{name}";
                        categoryLabel.label.horizontalCenter = "right";
                        categoryLabel.label.dx = -10;
                        categoryLabel.label.fill = am4core.color("#fff");
                        categoryLabel.label.hideOversized = false;
                        categoryLabel.label.truncate = false;
                    }

                    createSeries("tickets", "Tickets");
                    createSeries("developers", "Devs");

                }); // end am4core.ready()


            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>

    <!-- *** End AM Charts *** -->
    <!-- Specific Page Vendor -->
    <script src="~/template/vendor/select2/js/select2.js"></script>
    <script src="~/template/vendor/datatables/media/js/jquery.dataTables.min.js"></script>
    <script src="~/template/vendor/datatables/media/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/Buttons-1.4.2/js/dataTables.buttons.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/Buttons-1.4.2/js/buttons.bootstrap4.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/Buttons-1.4.2/js/buttons.html5.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/Buttons-1.4.2/js/buttons.print.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/JSZip-2.5.0/jszip.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/pdfmake-0.1.32/pdfmake.min.js"></script>
    <script src="~/template/vendor/datatables/extras/TableTools/pdfmake-0.1.32/vfs_fonts.js"></script>

    <!-- Examples -->
    <script src="~/template/js/examples/examples.datatables.default.js"></script>
    <script src="~/template/js/examples/examples.datatables.row.with.details.js"></script>
    <script src="~/template/js/examples/examples.datatables.tabletools.js"></script>


    <script>
        (function ($) {

            'use strict';

            var datatableInit = function () {

                $('#datatable-tickets').dataTable({
                    dom: '<"row"<"col-lg-6"l><"col-lg-6"f>><"table-responsive"t>p'
                });

            };

            $(function () {
                datatableInit();
            });

        }).apply(this, [jQuery]);
    </script>

}

